name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build and test job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++ \
            cmake \
            make \
            git \
            ca-certificates \
            libgoogle-glog-dev \
            libyaml-cpp-dev \
            nlohmann-json3-dev \
            libgtest-dev \
            liblua5.3-dev \
            pkg-config

      - name: Build and install concurrentqueue
        run: |
          mkdir -p /tmp/concurrentqueue
          cd /tmp/concurrentqueue
          git clone --depth 1 https://github.com/cameron314/concurrentqueue.git .
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            ..
          sudo cmake --install .

      - name: Build and install dbcppp
        run: |
          mkdir -p /tmp/dbcppp
          cd /tmp/dbcppp
          git clone --depth 1 https://github.com/xR3b0rn/dbcppp.git .
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
            -Dbuild_kcd=OFF \
            -Dbuild_tools=OFF \
            -Dbuild_tests=OFF \
            -Dbuild_examples=OFF \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install libvss-types
        run: |
          mkdir -p /tmp/libvss-types
          cd /tmp/libvss-types
          git clone --depth 1 https://github.com/tr-sdv-sandbox/libvss-types.git .
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
            -DVSS_TYPES_BUILD_TESTS=OFF \
            -DVSS_TYPES_BUILD_EXAMPLES=OFF \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_TESTS=ON \
                -DBUILD_INTEGRATION_TESTS=ON \
                -DBUILD_EXAMPLES=ON \
                -DCMAKE_PREFIX_PATH=/usr/local \
                ..

      - name: Build
        run: |
          cd build
          make -j$(nproc)

      - name: Run unit tests
        run: |
          cd build/tests
          # Run unit tests directly
          ./test_dbc_parser --gtest_output=xml:dbc_parser_results.xml || true
          ./test_lua_mapper --gtest_output=xml:lua_mapper_results.xml || true
          ./test_lua_mapper_simple --gtest_output=xml:lua_mapper_simple_results.xml || true
          ./test_signal_dag --gtest_output=xml:signal_dag_results.xml || true
          ./test_signal_processor --gtest_output=xml:signal_processor_results.xml || true
          ./test_vss_types --gtest_output=xml:vss_types_results.xml || true

      - name: Check Docker and system resources
        run: |
          echo "=== Docker Info ==="
          docker --version
          docker info || true
          echo "=== CPU Info ==="
          nproc
          echo "=== Memory Info ==="
          free -h
          echo "=== Disk Info ==="
          df -h

      - name: Run integration tests
        timeout-minutes: 15
        env:
          # Increase glog verbosity for debugging
          GLOG_v: 1
          GLOG_logtostderr: 1
        run: |
          cd build/tests
          # Run integration tests with timeout
          echo "Running test_can_replay..."
          timeout 600 ./test_can_replay --gtest_output=xml:can_replay_results.xml || echo "test_can_replay completed with status $?"

          echo "Running test_end_to_end..."
          timeout 600 ./test_end_to_end --gtest_output=xml:end_to_end_results.xml || echo "test_end_to_end completed with status $?"

          echo "All integration tests completed"

      - name: Install
        run: |
          cd build
          sudo make install

      - name: Verify installation
        run: |
          echo "Checking installation files..."

          # Check main headers
          test -f /usr/local/include/vssdag/signal_dag.hpp && echo "✓ signal_dag.hpp" || echo "✗ signal_dag.hpp MISSING"
          test -f /usr/local/include/vssdag/signal_processor.hpp && echo "✓ signal_processor.hpp" || echo "✗ signal_processor.hpp MISSING"
          test -f /usr/local/include/vssdag/lua_mapper.hpp && echo "✓ lua_mapper.hpp" || echo "✗ lua_mapper.hpp MISSING"
          test -f /usr/local/include/vssdag/vss_formatter.hpp && echo "✓ vss_formatter.hpp" || echo "✗ vss_formatter.hpp MISSING"

          # Check CAN headers
          test -f /usr/local/include/vssdag/can/dbc_parser.hpp && echo "✓ dbc_parser.hpp" || echo "✗ dbc_parser.hpp MISSING"
          test -f /usr/local/include/vssdag/can/can_reader.hpp && echo "✓ can_reader.hpp" || echo "✗ can_reader.hpp MISSING"

          # Check library
          test -f /usr/local/lib/libvssdag.a && echo "✓ libvssdag.a" || echo "✗ libvssdag.a MISSING"

          echo ""
          echo "✓ All installation files present"
